# Check that the module has a docstring
>>> __import__("0-add_integer").__doc__ is not None and len(__import__("0-add_integer").__doc__.strip()) > 0
True

# Check that the function has a docstring
>>> __import__("0-add_integer").add_integer.__doc__ is not None and len(__import__("0-add_integer").add_integer.__doc__.strip()) > 0
True

# Normal cases
>>> __import__("0-add_integer").add_integer(1, 2)
3

# Using default value for b (98)
>>> __import__("0-add_integer").add_integer(2)
100

# Floats are casted before addition
>>> __import__("0-add_integer").add_integer(2.7, 3.2)
5

# Negative numbers
>>> __import__("0-add_integer").add_integer(-5, -7)
-12

# Mixed float and int
>>> __import__("0-add_integer").add_integer(100.9, 1)
101

# TypeError: a must be an integer
>>> try:
...     __import__("0-add_integer").add_integer("hello", 3)
... except TypeError as e:
...     print(e)
a must be an integer

# TypeError: b must be an integer
>>> try:
...     __import__("0-add_integer").add_integer(3, None)
... except TypeError as e:
...     print(e)
b must be an integer
